# -*- coding: utf-8 -*-
"""CEAT - Finding best parameters.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dCLiVq0V0K3LGLGNinHmX1tIhEGiIoKF
"""

import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.feature_selection import RFE, mutual_info_regression
from sklearn.linear_model import LassoCV
from xgboost import XGBRegressor
from sklearn.feature_selection import SelectKBest, f_regression
from sklearn.metrics import mean_squared_error
from google.colab import files
import io

# üì¶ STEP 1: Upload Dataset

# Upload Excel file
uploaded = files.upload()
file_name = list(uploaded.keys())[0]
df = pd.read_excel(io.BytesIO(uploaded[file_name]))

# Target variable
target = "Psychological Stress and Frustration"
y = df[target]
X = df.drop(columns=["NO OF RESPONDENTS", target], errors='ignore')

# Handle missing values
X = X.fillna(X.median())

# Scale features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
X_scaled_df = pd.DataFrame(X_scaled, columns=X.columns)

# Store all feature rankings
results = {}

# üìå STEP 2: RFE with Random Forest
print("üîç RFE + RandomForestRegressor")
rf = RandomForestRegressor(n_estimators=100, random_state=42)
rfe = RFE(estimator=rf, n_features_to_select=15)
rfe.fit(X_scaled, y)
rfe_features = X.columns[rfe.support_].tolist()
results['RFE_RF'] = rfe_features
print("Top 15 Features:", rfe_features, "\n")

# üìå STEP 3: Pearson Correlation
print("üîç Pearson Correlation")
corrs = X.corrwith(y).abs().sort_values(ascending=False)
pearson_features = corrs.head(15).index.tolist()
results['Pearson'] = pearson_features
print("Top 15 Features:", pearson_features, "\n")

# üìå STEP 4: Lasso Regression
print("üîç LassoCV")
lasso = LassoCV(cv=5, random_state=42).fit(X_scaled, y)
coef_df = pd.Series(lasso.coef_, index=X.columns)
lasso_features = coef_df.abs().sort_values(ascending=False).head(15).index.tolist()
results['Lasso'] = lasso_features
print("Top 15 Features:", lasso_features, "\n")

# üìå STEP 5: XGBoost Feature Importance
print("üîç XGBoost Regressor")
xgb = XGBRegressor(n_estimators=100, random_state=42)
xgb.fit(X_scaled, y)
xgb_importance = pd.Series(xgb.feature_importances_, index=X.columns)
xgb_features = xgb_importance.sort_values(ascending=False).head(15).index.tolist()
results['XGBoost'] = xgb_features
print("Top 15 Features:", xgb_features, "\n")

# üìå STEP 6: Mutual Information
print("üîç Mutual Information")
mi = mutual_info_regression(X_scaled, y, random_state=42)
mi_series = pd.Series(mi, index=X.columns)
mi_features = mi_series.sort_values(ascending=False).head(15).index.tolist()
results['MutualInfo'] = mi_features
print("Top 15 Features:", mi_features, "\n")

# üìä STEP 7: Combine all results into a single DataFrame
combined_df = pd.DataFrame({model: pd.Series(feats) for model, feats in results.items()})
combined_df.index += 1
combined_df.index.name = "Rank"
print("\nüìã Combined Feature Rankings:")
print(combined_df)

from collections import Counter
import pandas as pd

# Paste your previous top 15 feature lists here:
rfe_features = ['Feel Happy at the Time of Wake Up', 'No Tension to Take Leave', 'Committing Official Work at Home', 'Celebrate Religious Festival', 'Good Friends in Living Place', 'Correct Time for Taking Food', 'Nice Sleep', 'Medical Checkup', 'No Need of Assistants', 'Arranging Tour with Colleagues and Their Families', 'Friends at Work Place', 'Presence of Mind in Work', 'Innovation and Creativity in Work', 'Cordial Relationship with Co-workers', 'Work Pressure']

pearson_features = ['Work Pressure', 'Make the Work Plan Well in Advance', 'No Tension to Take Leave', 'Birthday Celebration for Family Members', 'Better Understanding with Spouse / Parents', 'Childcare Benefits', 'No Need of Assistants', 'Friends at Work Place', 'Personal Development Programmes', 'Grievance Redressal System', 'Frequent Health Checkup', 'Attend Function of Relations and Neighbors', 'Complete the Work in Time', 'Minimum Relaxation', 'Be Happy with Work Style']

lasso_features = ['Work Pressure', 'Correct Time for Taking Food', 'Birthday Celebration for Family Members', 'Better Understanding with Spouse / Parents', 'Good Friends in Living Place', 'Personal Development Programmes', 'Do the Work During Illness', 'Health Awareness', 'Be Happy with Work Style', 'Pleasant with Customers', 'Medical Checkup', 'Interesting Person at Home', 'Free Accommodation', 'Friends at Work Place', 'Interested in Gardening']

xgb_features = ['Work Pressure', 'Celebrate Religious Festival', 'Nice Sleep', 'Feel Happy at the Time of Wake Up', 'Take a Bed at Before 10 p.m.', 'Medical Checkup', 'Doing Work Error Free', 'Time to Grooming Daily', 'Manage Myself for My Needs', 'Committing Official Work at Home', 'Time to Watching TV', 'Attend Function of Relations and Neighbors', 'Innovation and Creativity in Work', 'Good Friends in Living Place', 'No Intention to Take Leave Without Reasons']

mutual_features = ['Work Pressure', 'No Intention to Take Leave Without Reasons', 'Friends at Work Place', 'No Need of Assistants', 'Involved in Social Activities', 'Be Happy with Work Style', 'Make the Work Plan Well in Advance', 'Better Opportunities Missed Due to Family Commitments', 'Committing Official Work at Home', 'Shopping and Outing with Family', 'Work Concentration', 'Presence of Mind in Work', 'Correct Time for Taking Food', 'Arranging Tour with Colleagues and Their Families', 'Complete the Work in Time']

# Combine all feature lists into one big list
all_features = rfe_features + pearson_features + lasso_features + xgb_features + mutual_features

# Count how many times each feature appears
feature_counts = Counter(all_features)

# Sort by frequency (descending)
most_common_features = feature_counts.most_common(15)

# Convert to DataFrame for easy view or export
df_common = pd.DataFrame(most_common_features, columns=["Feature", "Frequency"])
print("‚úÖ Top 15 Most Common Features Across All Models:\n")
print(df_common)