# -*- coding: utf-8 -*-
"""CEAT - CatBoostClassifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jdlqmX7K_J4b-Bi1Ld8eOrAk-ux2Mlz6
"""

!pip install catboost shap openpyxl

import pandas as pd
from catboost import CatBoostClassifier, Pool
from sklearn.model_selection import train_test_split, StratifiedKFold, RandomizedSearchCV
from sklearn.metrics import accuracy_score
from collections import Counter

from google.colab import files

uploaded = files.upload()
file_name = list(uploaded.keys())[0]

if file_name.endswith('.xlsx') or file_name.endswith('.xls'):
    df = pd.read_excel(file_name, engine='openpyxl')
elif file_name.endswith('.csv'):
    df = pd.read_csv(file_name)
else:
    raise ValueError("Upload a .xlsx, .xls or .csv file.")

df['WorkRestRatio'] = df['DailyWorkHours'] / (df['SleepQuality'] + 1)
df['StressScore'] = (df['WorkPressure'] + df['PsychologicalStress']) / (df['WorkLifeBalance'] + 1)
df['PressureSleepRatio'] = df['WorkPressure'] / (df['SleepQuality'] + 1)
df['WorkPressureSquared'] = df['WorkPressure'] ** 2

X = df.drop(columns=['StressLevel'])
y = df['StressLevel']

cat_features = ['Gender', 'AgeGroup', 'MaritalStatus', 'JobRole']
for col in cat_features:
    X[col] = X[col].astype(str)

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

class_counts = Counter(y_train)
total = sum(class_counts.values())
class_weights = {cls: total/count for cls, count in class_counts.items()}

train_pool = Pool(X_train, y_train, cat_features=cat_features)
test_pool = Pool(X_test, y_test, cat_features=cat_features)

model = CatBoostClassifier(
    loss_function='MultiClass',
    random_seed=42,
    thread_count=-1,
    verbose=0,
    class_weights=class_weights
)

param_dist = {
    'depth': [6, 8, 10, 12],
    'learning_rate': [0.01, 0.03, 0.05, 0.1],
    'l2_leaf_reg': [1, 3, 5, 7, 9],
    'iterations': [500, 800, 1000, 1200],
    'border_count': [32, 50, 100, 150],
    'random_strength': [0, 1, 2, 3]
}

skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)

fit_params = {
    'cat_features': cat_features,
    'early_stopping_rounds': 50,
    'eval_set': [(X_test, y_test)],
    'verbose': 0
}

random_search = RandomizedSearchCV(
    estimator=model,
    param_distributions=param_dist,
    n_iter=30,           # number of parameter settings sampled (tune this higher if you want)
    scoring='accuracy',
    cv=skf,
    verbose=2,
    random_state=42,
    n_jobs=-1,
    refit=True
)

random_search.fit(X_train, y_train, **fit_params)

print("Best parameters found:")
print(random_search.best_params_)

best_model = random_search.best_estimator_

y_pred = best_model.predict(X_test)
test_acc = accuracy_score(y_test, y_pred)
print(f"âœ… Best model test accuracy: {test_acc:.4f}")